{"version":3,"sources":["components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","containers/App.jsx","registerServiceWorker.js","index.js"],"names":["Button","props","value","react_default","a","createElement","className","children","isNaN","classes","onClick","onInput","Input","type","name","input","ClearButton","onClear","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","setState","state","handleEqual","math","handleClear","src_components_Input","src_components_Button","src_components_ClearButton","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_containers_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"iVAqBeA,UAlBA,SAAAC,GAEd,IAAmBC,EASnB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,WAVaJ,EAUSD,EAAMM,SAP5BC,MAAMN,IAAoB,MAAVA,GAA2B,MAAVA,EAG/BO,0BALS,kBAS4BC,QAAU,kBAAMT,EAAMU,QAAQV,EAAMM,YAC9EN,EAAMM,YCLKK,UARD,SAAAX,GACb,OACCE,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,KAAK,QAAQZ,MAAOD,EAAMc,MAAOT,UAAU,aCKlDU,UARK,SAAAf,GACnB,OACCE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeI,QAAST,EAAMgB,SAC3ChB,EAAMM,qBC2DKW,sBAzDb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFI,YAAc,SAAAxB,GACZiB,EAAKQ,SAAS,CAACZ,MAAOI,EAAKS,MAAMb,MAAQb,KAR5BiB,EAWfU,YAAc,WACZV,EAAKQ,SAAS,CAACZ,MAAOe,OAAUX,EAAKS,MAAMb,UAZ9BI,EAefY,YAAc,WACZZ,EAAKQ,SAAS,CAACZ,MAAO,MAdtBI,EAAKS,MAAQ,CACXb,MAAO,IAHII,wEAoBf,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACTH,EAAAC,EAAAC,cAAC2B,EAAD,CAAOjB,MAAOO,KAAKM,MAAMb,QACzBZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,MAEFvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,MAEFvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,MAEFvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,KACAvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKO,aAAtB,KACA1B,EAAAC,EAAAC,cAAC4B,EAAD,CAAQtB,QAASW,KAAKI,aAAtB,MAEFvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAC6B,EAAD,CAAajB,QAASK,KAAKS,aAA3B,mBAlDQI,cCGZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtB,QACfgB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,IAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,IAAN,sBAEP5B,GAiDV,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAsB,CAAwBlC,GAIxBC,UAAUC,cAAc6B,MAAM3B,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBmC","file":"static/js/main.aba9369b.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Button.css\";\r\n\r\nconst Button = props => {\r\n\r\n\tconst isOperator = value => {\r\n\t\tconst classes = \"button-wrapper\";\r\n\r\n\t\tif (!isNaN(value) || value === \".\" || value === \"=\") {\r\n\t\t\treturn classes;\r\n\t\t}\r\n\t\treturn classes + ' operator';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={isOperator(props.children)} onClick={ () => props.onInput(props.children)}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport \"./Input.css\";\r\n\r\nconst Input = props => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input type=\"text\" name=\"input\" value={props.input} className=\"input\" />\r\n\t\t</div>\r\n\t );\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport \"./ClearButton.css\";\r\n\r\nconst ClearButton = props => {\r\n\treturn (\r\n\t\t<div className=\"clear-button\" onClick={props.onClear}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t );\r\n}\r\n\r\nexport default ClearButton;","import React, { Component } from \"react\";\r\nimport Button from \"../components/Button\";\r\nimport Input from \"../components/Input\";\r\nimport ClearButton from \"../components/ClearButton\";\r\nimport * as math from \"mathjs\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      input: ''\r\n    }\r\n  }\r\n\r\n  handleInput = value => {\r\n    this.setState({input: this.state.input + value});\r\n  }\r\n\r\n  handleEqual = () => {\r\n    this.setState({input: math.eval(this.state.input)});\r\n  }\r\n\r\n  handleClear = () => {\r\n    this.setState({input: ''});\r\n  }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<div className=\"calc-wrapper\">\r\n          <Input input={this.state.input}/>\r\n          <div className=\"row\">\r\n            <Button onInput={this.handleInput}>7</Button>\r\n            <Button onInput={this.handleInput}>8</Button>\r\n            <Button onInput={this.handleInput}>9</Button>\r\n            <Button onInput={this.handleInput}>/</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button onInput={this.handleInput}>4</Button>\r\n            <Button onInput={this.handleInput}>5</Button>\r\n            <Button onInput={this.handleInput}>6</Button>\r\n            <Button onInput={this.handleInput}>*</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button onInput={this.handleInput}>1</Button>\r\n            <Button onInput={this.handleInput}>2</Button>\r\n            <Button onInput={this.handleInput}>3</Button>\r\n            <Button onInput={this.handleInput}>+</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n            <Button onInput={this.handleInput}>.</Button>\r\n            <Button onInput={this.handleInput}>0</Button>\r\n            <Button onInput={this.handleEqual}>=</Button>\r\n            <Button onInput={this.handleInput}>-</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n          <ClearButton onClear={this.handleClear}>Clear</ClearButton>\r\n          </div>\r\n        </div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App.jsx';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}